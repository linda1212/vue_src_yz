(function(window, $, _, ec3) {
    function ECHART_YARN(value) {
        this.cfg = $.extend(true, {}, {
            theme: {
                map: 'map',
                custom: 'bar',
                bar: 'bar',
                rose: 'ring',
                line: 'line',
                mbar: 'mbar',
                circle: 'ring',
                hbar: 'hbar',
                pie: 'ring'
            },
            charts: []
        }, value);
    }
    ECHART_YARN.prototype = {
        init: function() {
            this.addListener();
            this.initAssets();
            this.sendRequests();
        },
        initAssets: function() {
            this.theme_obj = {
                legend: {
                    left: 85
                }
            };
            this.COLOR = {
                map_label_color: '#5d6f7a',
                map_label_hover_color: '#5e707a',
                map_max_color: '#2bb86f',
                map_min_color: '#93f5d5',
                label_color: '#262626',
                line_color: '#F3F3F3',
                grid_area_color: ['#f9f9f9', '#ffffff'],
                lineArea: ['rgba(24, 144, 255, 0.20)', 'rgba(46, 194, 91, 0.20)']
            };
            this.SIZE = {
                itemWidth: 10,
                itemHeight: 10,
                nameGap: 100,
                boundaryGap: ['20%', '20%'],
                fontSize: 14,
                lineGrid: {
                    top: 50,
                    left: 0,
                    right: 20,
                    bottom: 10,
                    containLabel: true
                },
                grid: {
                    top: 50,
                    left: 0,
                    right: 10,
                    bottom: 10,
                    containLabel: true
                },
                label_font_size: 12,
                bar_width: '30%',
                hbar_width: '40%',
                roseItemGap: 16
            };
            this.chartsInstances = [];
            this.els = [];
            this.chartsOptions = [];
        },
        sendRequests: function() {
            var self = this;
            if (_.has(this.cfg, 'charts')) {
                _.each(this.cfg.charts, function(item, index) {
                    if (_.has(item, 'dataSourceType')) {
                        if ('local' === item.dataSourceType) {
                            self.parserOne(item);
                        } else if ('object' === item.dataSourceType) {
                            self.parserLocalData(item, item.data);
                        } else {
                            self.sendOneRequset(item);
                        }
                    } else {
                        self.sendOneRequset(item);
                    }
                });
            }
        },
        sendOneRequset: function(item) {
            var self = this;
            var type = item.method || 'get';
            this.send({
                url: item.url,
                data: item.params
            }, type).done(function(data) {
                self.parserLocalData(item, data);
            }).fail(function(resp) {
                //fail
            });
        },
        renderNoData: function(el){// pie 暂无数据
            $('#'+el).parent().parent().parent().html('<div id="'+ el +'" data-none="' + 1 + '" style="    position: absolute;left: 50%;top: 48%;">暂无数据</div>');
        },
        emptyNoData: function(el){
            $('#'+el).parent().html('<div class="col-lg-6"><div class="chart-wrap useNoData"><div id="pie"></div></div></div><div class="col-lg-6"><div id="legend_pie" class="detail"></div></div>');
        },
        parserLocalData: function(item, data) {
            //TODO: 父元素 有class useNoData 处理
            var self = this;
            if(item.type == 'pie' && $('#'+item.el).parent().hasClass('useNoData') && !data.chartData.seriesData[0]){
                return self.renderNoData(item.el);
            }else{
                item.type == 'pie' && $('#pie').data('none') == '1' &&  self.emptyNoData(item.el);

                var theme_obj = self.getThemeObj(item),
                warning = _.has(data.chartData, 'warning') ? data.chartData.warning : 0;
                var opt = self.merge(item.type, data, theme_obj, item, warning);
                self.renderTitle(item, opt);
                var theme = _.has(item, 'theme') ? item.theme : self.cfg.theme[item.type];
                _.has(item, 'legend') && self.renderLegend(item.type, item.legend, data, theme_obj);
                item.type == 'map' ? self.renderMap(item.el, opt, item.scale, theme, item.h, item) : self.renderChart(item.el, opt, item.scale, theme, item.h, item);
            }
        },

        parserOne: function(item) {
            var self = this;
            var theme_obj = self.getThemeObj(item);
            var opt = self.mergeLocal(item.type, item.data, theme_obj);
            self.renderTitle(item, opt);
            var theme = _.has(item, 'theme') ? item.theme : self.cfg.theme[item.type];
            _.has(item, 'legend') && self.renderLegend(item.type, item.legend, data, theme_obj);
            item.type == 'map' ? self.renderMap(item.el, opt, item.scale, theme, item.h, item) : self.renderChart(item.el, opt, item.scale, theme, item.h, item);
        },

        renderTitle: function(item, opt) {
            if (_.has(item, 'ti') && _.has(opt, 'iTitle')) {
                if ($(item.ti).length > 0) {
                    $(item.ti).text(opt.iTitle);
                    $(item.ti).attr('title', opt.iTitle);
                }
            }
        },

        getThemeObj: function(item) {
            var result = this.theme_obj;
            if (_.has(item, 'theme_obj')) {
                result = $.extend(true, {}, this.theme_obj, item.theme_obj);
            }
            return result;
        },
        renderLegend: function(type, el, data, theme) {
            if ($(el).length <= 0) {
                throw new Error('no legend panel');
                return;
            }
            var self = this;
            switch (type) {
                case 'rose':
                case 'pie':
                case 'circle':
                    self.renderCircleLegend(el, data, theme);
                    break;
                case 'map':
                case 'custom':
                case 'bar':
                case 'line':
                case 'mbar':
                case 'hbar':
                default:
                    throw new Error('type is undefined');
                    break;
            }
        },
        renderCircleLegend: function(el, data, theme) {
            $(el).empty();
            var obj = {},
                title = '',
                ztitle = '';
            obj = _.has(data, 'chartData') ? data['chartData'] : {};
            title = _.has(obj, 'title') ? obj['title'] : '';
            ztitle = _.has(obj, 'yzTitle') ? obj['yzTitle'] : '';
            var self = this;
            var total = self.getTotal(obj['seriesData'], 'value');

            var colLen, colorArr = ["#9760e5", "#1890ff", "#2ec25b", "#facc14", "#ef4864"];

            if (_.has(theme, 'color') && _.isArray(theme.color)) {
                colorArr = theme.color;
            }

            colLen = colorArr.length;

            _.each(obj['seriesData'], function(item, index) {
                var bc = colorArr[index % colLen];
                var per = self.getAccuratePercent(obj['seriesData'], 'value', item);
                var one = $('<p><span class="circle"  style="background-color: ' + bc + '"></span><span>' + item.name + '</span> <span class="separator">|</span>' + per + '<span class="value">' + item.value + '</span><span>' + ztitle + '</span></p>');
                $(el).append(one);
            });
        },
        merge: function(type, data, theme, item, warning) {
            switch (type) {
                case 'map':
                    return this.mergeMap(data);
                    break;
                case 'custom':
                case 'bar':
                    return this.mergeBar(data, theme, item);
                    break;
                case 'bar-line':
                    return this.mergeBarLine(data, theme, item);
                    break;
                case 'rose':
                    return this.mergeRose(data, theme);
                    break;
                case 'pie':
                    return this.mergeCircle(data, theme, 'pie');
                    break;
                case 'line':
                    return this.mergeLine(data, theme);
                    break;
                case 'mbar':
                    return this.mergeMbar(data, theme);
                    break;
                case 'circle':
                    return this.mergeCircle(data, theme, 'circle');
                    break;
                case 'hbar':
                    return this.mergeHbar(data, theme);
                    break;
                default:
                    throw new Error('type is undefined');
                    break;
            }
        },
        mergeLocal: function(type, data, theme) {
            switch (type) {
                case 'circle':
                    return this.mergeLocalCircle(data, theme);
                    break;
                case 'map':
                case 'custom':
                case 'bar':
                case 'rose':
                case 'line':
                    return this.mergeLocalLine(data, theme);
                case 'mbar':
                case 'hbar':
                default:
                    throw new Error('type is undefined');
                    break;
            }
        },
        send: function(ajaxData, type) {
            var self = this;
            var _type = type || 'get';
            var data = $.extend(true, {}, ajaxData.data);
            var defaultParams = {
                type: _type,
                dataType: 'json',
                contentType: "application/json; charset=utf-8"
            };
            var newParams = $.extend(true, {}, defaultParams, ajaxData);
            newParams.data = data;
            var dfd = $.Deferred();
            $.ajax(newParams).success(function(resp) {
                var code = resp.hasOwnProperty('code') ? resp.code : -1;
                switch (code) {
                    //1成功
                    case 0:
                        if (resp.hasOwnProperty('data')) {
                            dfd.resolve(resp.data);
                        } else {
                            dfd.reject(resp);
                        }
                        break;
                    default:
                        dfd.reject(resp);
                        break;
                }
            }).fail(function(resp) {
                dfd.reject(resp);
            });
            return dfd;
        },
        //map
        renderMap: function(el, opt, scale, theme, gh, item) {
            var self = this;
            if (_.isNull(opt)) return;

            require.config({
                paths: {
                    echarts: 'http://static.cn95598.com/js/lib/echarts/build/dist'
                }
            });
            require(
                ['echarts', 'echarts/chart/map'],
                function(ec2) {
                    self.renderChart(el, opt, scale, theme, gh, item, ec2);
                });
        },
        renderChart: function(el, opt, scale, theme, gh, item, ec2) {
            var self = this;
            scale = scale || 0.55;
            var echarts = ec2 || ec3;
            if ($('#' + el).length > 0) {
                self.resetSize(el, scale, gh, item);
                var oldcharts = self.chartsInstances[el];
                if (oldcharts != null && oldcharts != "" && oldcharts != undefined) {
                    oldcharts.dispose();
                }
                var chart;

                if (theme) {
                    chart = self.chartsInstances[el] = echarts.init(document.getElementById(el), theme);
                } else {
                    chart = self.chartsInstances[el] = echarts.init(document.getElementById(el));
                }

                if (_.has(item, 'clickHandler') && _.isFunction(item.clickHandler)) {
                    chart.on('click', item.clickHandler);
                }
                self.els.push(el);
                self.chartsOptions.push({
                    el: el,
                    opt: opt,
                    scale: scale,
                    theme: theme,
                    gh: gh
                });
                chart.clear();
                chart.showLoading();
                if ('map' == item.type) {
                    this.loadMapAssets();
                }
                chart.setOption(opt);
                chart.hideLoading();
            }
        },
        loadMapAssets: function() {
            var mapType = [];
            var mapGeoData = require('echarts/util/mapData/params');

            for (var city in cityMap) {
                mapType.push(city);
                mapGeoData.params[city] = {
                    getGeoJson: (function(c) {
                        var geoJsonName = cityMap[c];
                        return function(callback) {
                            $.getJSON('../js/plugins/geoJson/china-main-city/' + geoJsonName + '.jsonp', callback);
                        }
                    })(city)
                }
            }
        },
        /*
         * scale:高度和宽度的比例
         * gh：固定高度
         * item.min_height:最小高度
         * item.max_height:最大高度
         **/
        resetSize: function(el, scale, gh, item) {
            var w = $('#' + el).parent().width();
            var h = gh || w * scale,
                truely_height = h;

            if (_.has(item, 'min_height')) {
                truely_height = truely_height < parseFloat(item.min_height) ? parseFloat(item.min_height) : truely_height;
            }

            if (_.has(item, 'max_height')) {
                truely_height = truely_height > parseFloat(item.max_height) ? parseFloat(item.max_height) : truely_height;
            }

            $('#' + el).length > 0 && $('#' + el).css({
                'width': '100%',
                'height': truely_height + 'px'
            });
        },
        resizeAllChart: function() {
            var self = this;
            _.each(this.els, function(item, index) {
                self.chartsInstances[item].resize();
            });
        },
        trace: function(data, msg) {
            msg = msg || '返回的数据为';
            if (this.debug) console.log(msg + ":" + JSON.stringify(data));
        },

        mergeMap: function(data) {
            var self = this;
            var max, min, dataArr = [];
            var jsonMap = data.chartData;
            var pName = data.provinceName;
            var cName = data.cityName;
            var title = _.has(data, 'title') ? data.title : self.defaultTitle['map'];
            var ztitle = _.has(data, 'yzTitle') ? data.yzTitle : '';
            $.each(jsonMap, function(i, jsonMap) {
                max = (max >= Math.ceil(jsonMap.value) ? max : Math.ceil(jsonMap.value));
                min = 0; //(min <= parseInt(jsonMap.value) ? min : parseInt(jsonMap.value));
                dataArr[i] = {};
                dataArr[i]['name'] = jsonMap.name;
                dataArr[i]['value'] = jsonMap.value;
            });
            var opt = {
                title: {
                    show: true,
                    text: ztitle,
                    x: 0,
                    textStyle: {
                        fontSize: self.SIZE.label_font_size,
                        fontWeight: 'normal',
                        color: self.COLOR.label_color
                    }
                },
                iTitle: title,
                tooltip: {
                    trigger: 'item',
                    formatter: '{b}'
                },
                dataRange: {
                    min: parseInt(min + ''),
                    max: parseInt(max + ''),
                    realtime: false,
                    text: ['高', '低'],
                    calculable: true,
                    textStyle: {
                        color: self.COLOR.label_color
                    },
                    color: [self.COLOR.map_max_color, self.COLOR.map_min_color]
                },
                series: [{
                    name: pName,
                    type: 'map',
                    mapType: pName,
                    selectedMode: 'single',
                    itemStyle: {
                        normal: {
                            label: {
                                show: true,
                                textStyle: {
                                    color: self.COLOR.map_label_color
                                }
                            }
                        },
                        emphasis: {
                            areaStyle: {
                                color: self.COLOR.map_hover_color
                            },
                            label: {
                                show: true,
                                color: '#ff0000',
                                textStyle: {
                                    color: self.COLOR.map_label_color
                                }
                            }
                        }
                    },
                    data: dataArr
                }]
            };

            return opt;
        },

        mergeBarLine: function(data, theme, outItem) { // 左边bar 右边line

            this.trace(data);

            if (null == data || null == this.COLOR) return;
            var self = this;
            var obj = {},
                ztitle = [],
                title = '',
                legendData = [],
                xAxisData = [],
                series = [];

            if (_.has(data, 'chartData') && _.isArray(data['chartData']) && data['chartData'].length > 0) {
                obj = data['chartData'][0];
            }

            title = _.has(obj, 'title') ? obj['title'] : '';
            ztitle = _.has(obj, 'yzTitle') ? obj['yzTitle'] : '';
            xAxisData = _.has(obj, 'categories') ? obj['categories'] : [];

            _.has(obj, 'series') && _.each(obj['series'], function(item, index) {

                var legendItem = {
                    name: item.name,
                    icon: 'stack'
                };

                legendData.push(legendItem);

                var barwidth = self.SIZE.bar_width;
                var barMaxWidth = '20px';

                if (_.has(theme, 'barWidth')) {
                    barwidth = theme.barWidth;
                }

                if (_.has(theme, 'barMaxWidth')) {
                    barMaxWidth = theme.barMaxWidth;
                }
                var seriesItem = {
                    name: item.name,
                    barWidth: barwidth,
                    barMaxWidth: barMaxWidth,
                    data: item.data
                };
                outItem.stack && item.type === 'bar' && (seriesItem.stack = outItem.stack);

                item.type === 'line' && (item.lineStyle = {
                    color: 'red'
                })

                $.extend(seriesItem, item);
                if (_.has(item, 'type')) {
                    seriesItem.type = item.type;
                } else {
                    seriesItem.type = 'bar';
                }
                series.push(seriesItem);
            });
            opt = {
                tooltip: {
                    trigger: 'axis',
                    axisPointer: { // 坐标轴指示器，坐标轴触发有效
                        type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
                    }
                },
                iTitle: title,
                title: [{
                    show: true,
                    text: ztitle[0],
                    top: -1,
                    left: -5
                }, {
                    show: true,
                    text: ztitle[1],
                    top: -1,
                    right: 5
                }],
                grid: self.SIZE.grid,
                legend: {
                    left: theme.legend.left,
                    top: 0,
                    itemWidth: self.SIZE.itemWidth,
                    itemHeight: self.SIZE.itemHeight,
                    data: legendData
                },
                xAxis: [{
                    type: 'category',
                    data: xAxisData,
                    nameGap: self.SIZE.nameGap,
                    boundaryGap: self.SIZE.boundaryGap,
                    axisTick: {
                        alignWithLabel: true
                    },
                    axisLabel: {
                        fontSize: self.SIZE.label_font_size
                    }
                }],
                yAxis: [{
                    type: 'value'
                }, {
                    type: 'value',
                    axisLine: {
                        lineStyle: {
                            color: self.COLOR.line_color,
                            width: 1
                        }
                    },
                    splitLine: {
                        show: true,
                        lineStyle: {
                            color: [self.COLOR.line_color]
                        }
                    }
                }],
                series: series
            };

            return opt;
        },

        mergeBar: function(data, theme, outItem) {
            this.trace(data);

            if (null == data || null == this.COLOR) return;
            var self = this;
            var obj = {},
                ztitle = '',
                title = '',
                legendData = [],
                xAxisData = [],
                series = [];

            if (_.has(data, 'chartData') && _.isArray(data['chartData']) && data['chartData'].length > 0) {
                obj = data['chartData'][0];
            }

            title = _.has(obj, 'title') ? obj['title'] : '';
            ztitle = _.has(obj, 'yzTitle') ? obj['yzTitle'] : '';
            xAxisData = _.has(obj, 'categories') ? obj['categories'] : [];

            _.has(obj, 'series') && _.each(obj['series'], function(item, index) {

                var legendItem = {
                    name: item.name,
                    icon: 'stack'
                };

                legendData.push(legendItem);

                var barwidth = self.SIZE.bar_width;
                var barMaxWidth = '20px';

                if (_.has(theme, 'barWidth')) {
                    barwidth = theme.barWidth;
                }

                if (_.has(theme, 'barMaxWidth')) {
                    barMaxWidth = theme.barMaxWidth;
                }

                var seriesItem = {
                    name: item.name,
                    barWidth: barwidth,
                    barMaxWidth: barMaxWidth,
                    data: item.data
                };
                outItem.stack && (seriesItem.stack = outItem.stack);
                $.extend(seriesItem, item);
                if (_.has(item, 'type')) {
                    seriesItem.type = item.type;
                } else {
                    seriesItem.type = 'bar';
                }
                series.push(seriesItem);
            });
            //bar
            if (outItem.direction == 'y') {
                opt = {
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: { // 坐标轴指示器，坐标轴触发有效
                            type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
                        }
                    },
                    iTitle: title,
                    title: {
                        show: true,
                        text: ztitle,
                        top: -1,
                        left: -5
                    },
                    grid: self.SIZE.grid,
                    legend: {
                        left: theme.legend.left,
                        top: 0,
                        itemWidth: self.SIZE.itemWidth,
                        itemHeight: self.SIZE.itemHeight,
                        data: legendData
                    },
                    yAxis: [{
                        type: 'category',
                        data: xAxisData,
                        nameGap: self.SIZE.nameGap,
                        boundaryGap: self.SIZE.boundaryGap,
                        axisTick: {
                            alignWithLabel: true
                        },
                        axisLabel: {
                            fontSize: self.SIZE.label_font_size
                        }
                    }],
                    xAxis: [{
                        type: 'value'
                    }],
                    series: series
                };
            } else {
                opt = {
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: { // 坐标轴指示器，坐标轴触发有效
                            type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
                        }
                    },
                    iTitle: title,
                    title: {
                        show: true,
                        text: ztitle,
                        top: -1,
                        left: -5
                    },
                    grid: self.SIZE.grid,
                    legend: {
                        left: theme.legend.left,
                        top: 0,
                        itemWidth: self.SIZE.itemWidth,
                        itemHeight: self.SIZE.itemHeight,
                        data: legendData
                    },
                    xAxis: [{
                        type: 'category',
                        data: xAxisData,
                        nameGap: self.SIZE.nameGap,
                        boundaryGap: self.SIZE.boundaryGap,
                        axisTick: {
                            alignWithLabel: true
                        },
                        axisLabel: {
                            fontSize: self.SIZE.label_font_size
                        }
                    }],
                    yAxis: [{
                        type: 'value'
                    }],
                    series: series
                };
            }

            return opt;
        },
        mergeRose: function(data, theme) {

            this.trace(data);

            if (null == data || null == this.COLOR) return;
            var self = this;
            var ztitle = '',
                obj = {},
                title = '',
                legendData = [],
                seriesData = [];

            obj = _.has(data, 'chartData') ? data['chartData'] : {};
            ztitle = _.has(obj, 'yzTitle') ? obj['yzTitle'] : '';
            title = _.has(obj, 'title') ? obj['title'] : '';

            if (_.has(obj, 'seriesData')) {

                var sortData = obj['seriesData'].sort(function(a, b) {
                    return b.value - a.value;
                });

                var total = self.getTotal(obj['seriesData'], 'value');
                var slen = sortData.length;

                _.each(sortData, function(item, index) {
                    var legendItem = {
                        name: (theme.legend && theme.legend.showPercent == false) ? item['name'] : item['name'] + '  ' + self.getPercent(total, item['value']),
                        textStyle: {
                            color: self.COLOR.label_color
                        },
                        icon: 'circle'
                    };

                    legendData.push(legendItem);
                    var seriesItem = {
                        name: (theme.legend && theme.legend.showPercent == false) ? item['name'] : item['name'] + '  ' + self.getPercent(total, item['value']),
                        value: item['value']
                    };

                    if (_.has(theme, 'colors')) {
                        seriesItem.itemStyle = {
                            normal: {
                                color: theme.colors[index % slen]
                            }
                        };
                    }

                    seriesData.push(seriesItem);
                });
            }

            var showLabel = true;
            var radius = ['30%', '80%'];
            var center = ['50%', '50%'];
            if (_.has(theme, 'showLabel')) {
                showLabel = theme.showLabel;
            }

            if (_.has(theme, 'radius')) {
                radius = theme.radius;
            }

            if (_.has(theme, 'center')) {
                center = theme.center;
            }
            var legend = {
                show: false,
                type: 'scroll',
                orient: 'vertical',
                right: 50,
                top: 140,
                bottom: 20,
                itemWidth: self.SIZE.itemWidth,
                itemHeight: self.SIZE.itemHeight,
                data: legendData,
                itemGap: self.SIZE.roseItemGap //20
            }
            if (_.has(theme, 'legend')) {
                legend = $.extend(legend, theme.legend);
            }
            //rose
            opt = {
                iTitle: title,
                title: {
                    show: false,
                    text: ztitle,
                    left: -5,
                    top: -1,
                    textStyle: {
                        fontSize: self.SIZE.label_font_size,
                        fontWeight: 'normal',
                        color: self.COLOR.label_color
                    }
                },
                tooltip: {
                    trigger: 'item',
                    formatter: "{a} <br/>{b} : {c} ({d}%)"
                },
                legend: legend,
                grid: $.extend(true, {}, {
                    itemWidth: self.SIZE.itemWidth,
                    itemHeight: self.SIZE.itemHeight
                }, self.SIZE.grid),
                series: [{
                    name: title,
                    type: 'pie',
                    radius: radius,
                    center: center,
                    data: seriesData,
                    roseType: 'radius',
                    label: {
                        normal: {
                            show: showLabel
                        }
                    },
                    labelLine: {
                        normal: {
                            show: showLabel,
                            smooth: 0.2,
                            length: 10,
                            length2: 20
                        }
                    },
                    animationType: 'scale',
                    animationEasing: 'elasticOut',
                    animationDelay: function(idx) {
                        return Math.random() * 200;
                    }
                }]
            };
            this.trace(opt);
            return opt;
        },
        mergePie: function(data, theme) {

            this.trace(data);

            if (null == data || null == this.COLOR) return;
            var self = this;
            var ztitle = '',
                obj = {},
                title = '',
                legendData = [],
                seriesData = [];

            obj = _.has(data, 'chartData') ? data['chartData'] : {};
            ztitle = _.has(obj, 'yzTitle') ? obj['yzTitle'] : '';
            title = _.has(obj, 'title') ? obj['title'] : '';

            if (_.has(obj, 'seriesData')) {

                var sortData = obj['seriesData'].sort(function(a, b) {
                    return b.value - a.value;
                });

                var total = self.getTotal(obj['seriesData'], 'value');
                var slen = sortData.length;

                _.each(sortData, function(item, index) {
                    var legendItem = {
                        name: (theme.legend && theme.legend.showPercent == false) ? item['name'] : item.name + '  ' + self.getPercent(total, item['value']),
                        textStyle: {
                            color: self.COLOR.label_color
                        },
                        icon: 'circle'
                    };

                    legendData.push(legendItem);
                    var seriesItem = {
                        name: (theme.legend && theme.legend.showPercent == false) ? item['name'] : item.name + '  ' + self.getPercent(total, item['value']),
                        value: item['value']
                    };

                    if (_.has(theme, 'colors')) {
                        seriesItem.itemStyle = {
                            normal: {
                                color: theme.colors[index % slen]
                            }
                        };
                    }

                    seriesData.push(seriesItem);
                });
            }

            var showLabel = true;
            var radius = ['0', '75%'];
            var center = ['50%', '50%'];
            if (_.has(theme, 'showLabel')) {
                showLabel = theme.showLabel;
            }

            if (_.has(theme, 'radius')) {
                radius = theme.radius;
            }

            if (_.has(theme, 'center')) {
                center = theme.center;
            }
            var legend = {
                show: false,
                type: 'scroll',
                orient: 'vertical',
                right: 50,
                top: 140,
                bottom: 20,
                itemWidth: self.SIZE.itemWidth,
                itemHeight: self.SIZE.itemHeight,
                data: legendData,
                itemGap: self.SIZE.roseItemGap //20
            };
            if (_.has(theme, 'legend')) {
                legend = $.extend(legend, theme.legend);
            }
            //rose
            opt = {
                iTitle: title,
                title: {
                    show: false,
                    text: ztitle,
                    left: -5,
                    top: -1,
                    textStyle: {
                        fontSize: self.SIZE.label_font_size,
                        fontWeight: 'normal',
                        color: self.COLOR.label_color
                    }
                },
                tooltip: {
                    trigger: 'item',
                    formatter: "{b} : {c}"
                },
                legend: legend,
                grid: $.extend(true, {}, {
                    itemWidth: self.SIZE.itemWidth,
                    itemHeight: self.SIZE.itemHeight
                }, self.SIZE.grid),
                series: [{
                    name: title,
                    type: 'pie',
                    radius: radius,
                    center: center,
                    data: seriesData,
                    // roseType: 'radius',
                    label: {
                        normal: {
                            show: false,
                            textStyle: {
                                color: 'rgba(255, 0, 0, 0.3)'
                            }
                        }
                    },
                    labelLine: {
                        normal: {
                            show: false,
                            lineStyle: {
                                color: 'rgba(255, 0, 0, 0.3)'
                            },
                            smooth: 0.2,
                            length: 10,
                            length2: 20
                        }
                    },
                    animationType: 'scale',
                    animationEasing: 'elasticOut',
                    animationDelay: function(idx) {
                        return Math.random() * 200;
                    }
                }]
            };
            this.trace(opt);
            return opt;
        },
        mergeLine: function(data, theme) {

            this.trace(data);

            if (null == data || null == this.COLOR) return;
            var self = this;
            var ztitle = '',
                obj = {},
                title = '',
                categories = [],
                legendData = [],
                seriesData = [];

            obj = _.has(data, 'chartData') && data['chartData'] ? data['chartData'] : {};
            ztitle = _.has(obj, 'yzTitle') && obj['yzTitle'] ? obj['yzTitle'] : '';
            title = (_.has(obj, 'title') && obj['title']) ? obj['title'] : '';
            categories = _.has(obj, 'categories') && obj['categories'] ? obj['categories'] : [];

            _.has(obj, 'series') && _.each(obj['series'], function(item, index) {
                var legendItem = {
                    name: item.name,
                    icon: 'stack'
                };
                legendData.push(legendItem);
                var seriesItem = {
                    name: item.name,
                    type: 'line',
                    connectNulls: true,
                    data: item.data
                }

                if (_.has(theme, 'areaStyle')) {
                    seriesItem.areaStyle = {
                        normal: {
                            color: theme.areaStyle[index]
                        }
                    };
                }
                seriesData.push(seriesItem);
            });

            var waringItem = {
                    name: '告警',
                    type: 'line',
                    connectNulls: true,
                    data: [obj.warning],
                    lineStyle: {
                        width: 0,
                        opacity: 0,
                        color: '#ff0000'
                    },
                    itemStyle: {
                        color: '#ff0000',
                        opacity: 0

                    }
                },
                lineItem, lineResult;

            var showWarning = false;
            if (_.has(theme, 'showWarning')) {
                showWarning = theme.showWarning;
            }

            if (_.has(obj, 'warning') && obj['warning'] && showWarning) {
                lineItem = {
                    data: [{
                        name: '告警值',
                        yAxis: obj.warning
                    }]
                };

                if (_.has(theme, 'markLine') && lineItem) {
                    lineResult = $.extend(true, {}, lineItem, theme.markLine)
                }

                waringItem.markLine = lineResult;

                seriesData.push(waringItem);
            }

            var grid = self.SIZE.lineGrid;

            if (_.has(theme, 'grid')) {
                grid = theme.grid;
            }

            //line
            opt = {
                iTitle: title,
                title: {
                    show: true,
                    text: ztitle,
                    top: -1,
                    left: -5
                },
                grid: grid,
                tooltip: {
                    trigger: 'axis'
                },
                legend: {
                    left: theme.legend.left,
                    top: 0,
                    itemWidth: self.SIZE.itemWidth,
                    itemHeight: self.SIZE.itemHeight,
                    data: legendData
                },
                toolbox: {
                    show: false,
                    feature: {
                        mark: {
                            show: true
                        },
                        dataView: {
                            show: true,
                            readOnly: false
                        },
                        magicType: {
                            show: true,
                            type: ['line', 'bar', 'stack', 'tiled']
                        },
                        restore: {
                            show: true
                        },
                        saveAsImage: {
                            show: true
                        }
                    }
                },
                calculable: true,
                xAxis: [{
                    type: 'category',
                    boundaryGap: false,
                    axisLabel: {
                        interval: theme.interval
                    },
                    data: categories
                }],
                yAxis: [{
                    type: 'value'
                }],
                series: seriesData
            };
            return opt;
        },
        mergeMbar: function(data, theme) {

            this.trace(data);

            if (null == data || null == this.COLOR) return;
            var self = this;

            var ztitle = '',
                obj = {},
                title = '',
                categories = [],
                legendData = [],
                seriesData = [];

            obj = _.has(data, 'chartData') ? data['chartData'][0] : {};
            ztitle = _.has(obj, 'yzTitle') ? obj['yzTitle'] : '';
            title = _.has(obj, 'title') ? obj['title'] : '';
            categories = _.has(obj, 'categories') ? obj['categories'] : [];
            if (_.has(obj, 'series')) {
                var sortData = obj['series'].sort(function(a, b) {
                    return true;
                });
                _.each(sortData, function(item, index) {
                    var legendItem = {
                        name: item.name,
                        textStyle: {
                            color: self.COLOR.label_color
                        },
                        icon: 'stack'
                    };
                    legendData.push(legendItem);
                    var barMaxWidth = '20px';
                    if (_.has(theme, 'barMaxWidth')) {
                        barMaxWidth = theme.barMaxWidth;
                    }

                    var seriesItem = {
                        name: item.name,
                        type: 'bar',
                        stack: '总量',
                        barGap: '-100%',
                        barCategoryGap: '60%',
                        barMaxWidth: barMaxWidth,
                        label: {
                            normal: {
                                show: false,
                                position: 'insideRight'
                            }
                        },
                        data: item.data
                    };
                    seriesData.push(seriesItem);
                });
            }
            //mbar
            opt = {
                tooltip: {
                    trigger: 'axis',
                    axisPointer: { // 坐标轴指示器，坐标轴触发有效
                        type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
                    }
                },
                iTitle: title,
                title: {
                    show: true,
                    text: ztitle,
                    top: -1,
                    left: -5,
                    textStyle: {
                        fontSize: self.SIZE.label_font_size,
                        fontWeight: 'normal',
                        color: self.COLOR.label_color
                    }
                },
                legend: {
                    left: theme.legend.left,
                    top: 0,
                    itemWidth: self.SIZE.itemWidth,
                    itemHeight: self.SIZE.itemHeight,
                    data: legendData
                },
                grid: $.extend(true, {}, {
                    itemWidth: self.SIZE.itemWidth,
                    itemHeight: self.SIZE.itemHeight
                }, self.SIZE.grid),
                xAxis: {
                    type: 'category',
                    data: categories,
                    axisLine: {
                        lineStyle: {
                            color: self.COLOR.line_color
                        }
                    },
                    axisLabel: {
                        color: self.COLOR.label_color
                    },
                    splitLine: {
                        show: true,
                        lineStyle: {
                            color: [self.COLOR.line_color]
                        }
                    }
                },
                yAxis: {
                    type: 'value',
                    axisLine: {
                        lineStyle: {
                            color: self.COLOR.line_color,
                            width: 1
                        }
                    },
                    axisLabel: {
                        color: self.COLOR.label_color
                    },
                    splitLine: {
                        show: true,
                        lineStyle: {
                            color: [self.COLOR.line_color]
                        }
                    },
                    splitArea: {
                        show: true,
                        areaStyle: {
                            color: self.COLOR.grid_area_color
                        }
                    }
                },
                series: seriesData
            };
            return opt;
        },
        //环形图
        mergeCircle: function(data, theme, type) {
            this.trace(data);
            if (null == data || null == this.COLOR) return;
            var self = this;
            var ztitle = '',
                obj = {},
                title = '',
                categories = [],
                legendData = [],
                seriesData = [];

            obj = _.has(data, 'chartData') ? data['chartData'] : {};
            ztitle = _.has(obj, 'yzTitle') ? obj['yzTitle'] : '';
            title = _.has(obj, 'title') ? obj['title'] : '';
            var total = self.getTotal(obj['seriesData'], 'value');
            var array = _.has(obj, 'seriesData') ? obj.seriesData : [];

            _.each(array, function(item, index) {
                var legendItem = {
                    name: (theme.legend && theme.legend.showPercent == false) ? item['name'] : item.name + '：' + self.getAccuratePercent(array, 'value', item),
                    textStyle: {
                        color: self.COLOR.label_color
                    },
                    icon: 'circle'
                };

                legendData.push(legendItem);
                var seriesItem = {
                    name: (theme.legend && theme.legend.showPercent == false) ? item['name'] : item.name + '：' + self.getAccuratePercent(array, 'value', item),
                    value: item.value
                };
                seriesData.push(seriesItem);
            });

            var showLabel = false;
            if (_.has(theme, 'showLabel')) {
                showLabel = theme.showLabel;
            }

            var newtitle, title = {
                text: title,
                subtext: total.toFixed(2),
                x: 'center',
                y: '40%',
                show: true
            };
            var default_radius = type == 'pie' ? ['0%', '78%'] : ['60%', '78%'];

            var center = ['50%', '50%'],
                radius = default_radius;

            var legend = {
                show: false,
                type: 'scroll',
                orient: 'vertical',
                left: 0,
                right: 0,
                top: 0,
                bottom: 0,
                itemWidth: 6,
                itemHeight: 6,
                data: legendData,
                itemGap: self.SIZE.roseItemGap, //20,
                fontSize: 14
            }

            var labelFormatter = (theme.label && theme.label.showPercent == true) ? '{b}: {d}%' : `{b} ({c}) `;

            var label = { //饼图图形上的文本标签
                normal: {
                    show: showLabel,
                    position: 'outside', //标签的位置
                    formatter: labelFormatter
                }
            };

            if (_.has(theme, 'title')) {
                newtitle = $.extend(true, {}, title, theme.title);
            }

            if (_.has(theme, 'radius')) {
                radius = theme.radius;
            }

            if (_.has(theme, 'legend')) {
                legend = $.extend(legend, theme.legend);
            }

            if (_.has(theme, 'center')) {
                center = theme.center;
            }

            //circle
            opt = {
                iTitle: title,
                tooltip: {
                    trigger: 'item',
                    formatter: labelFormatter
                },
                title: newtitle,
                legend: legend,
                toolbox: {
                    show: false,
                    feature: {
                        mark: {
                            show: true
                        },
                        dataView: {
                            show: true,
                            readOnly: false
                        },
                        magicType: {
                            show: true,
                            type: ['pie', 'funnel'],
                            option: {
                                funnel: {
                                    x: '25%',
                                    width: '50%',
                                    funnelAlign: 'center',
                                    max: 1548
                                }
                            }
                        },
                        restore: {
                            show: true
                        },
                        saveAsImage: {
                            show: true
                        }
                    }
                },
                calculable: true,
                series: [{
                    name: title,
                    type: 'pie',
                    radius: radius,
                    center: center,
                    label: label,
                    itemStyle: {
                        normal: {
                            label: {
                                show: showLabel
                            },
                            labelLine: {
                                show: showLabel
                            }
                        },
                        emphasis: {
                            label: {
                                show: showLabel,
                                position: 'center',
                                textStyle: {
                                    fontSize: '12',
                                    fontWeight: 'bold'
                                }
                            }
                        }
                    },
                    data: seriesData
                }]
            };

            // if (_.has(theme, 'legend') && _.has(theme.legend, 'showPercent') && theme.legend.showPercent == true) {
            //     console.log('----' + theme.legend.showPercent);
            //     opt.legend.formatter = function(params) {
            //         for (var i = 0; i < opt.series[0].data.length; i++) {
            //             if (opt.series[0].data[i].name == params) {
            //                 return ' ' + params + ' : ' + self.getAccuratePercent(opt.series[0].data, 'value', opt.series[0].data[i]);
            //             }
            //         }
            //     }
            // }

            self.trace(opt);
            return opt;
        },
        mergeLocalLine(data, theme) {
            this.trace(data);

            if (null == data || null == this.COLOR) return;
            var self = this;
            var ztitle = '',
                obj = {},
                title = '',
                categories = [],
                legendData = [],
                series = [];

            obj = _.has(data, 'chartData') ? data['chartData'] : {};
            ztitle = _.has(obj, 'yzTitle') ? obj['yzTitle'] : '';
            title = (_.has(obj, 'title') && '' != obj['title']) ? obj['title'] : '';
            categories = _.has(obj, 'categories') ? obj['categories'] : [];

            _.has(data, 'seriesData') && _.each(data['seriesData'], function(item, index) {
                var legendItem = {
                    name: item.name,
                    icon: 'stack'
                };
                legendData.push(legendItem);
                var seriesItem = {
                    name: item.name,
                    type: 'line',
                    connectNulls: true,
                    data: item.value
                }

                // var lineItem, lineResult;

                // if (_.has(obj, 'warning')) {
                //     lineItem = {
                //         data: [{
                //             name: '告警值',
                //             yAxis: obj.warning
                //         }]
                //     };
                // }

                // if (_.has(theme, 'markLine') && lineItem) {
                //     lineResult = $.extend(true, {}, lineItem, theme.markLine)
                // }

                // seriesItem.markLine = lineResult;

                if (_.has(theme, 'areaStyle')) {
                    seriesItem.areaStyle = {
                        normal: {
                            color: theme.areaStyle[index]
                        }
                    };
                }
                series.push(seriesItem);
            });

            var grid = self.SIZE.lineGrid;

            if (_.has(theme, 'grid')) {
                grid = theme.grid;
            }

            //line
            opt = {
                iTitle: title,
                title: {
                    show: true,
                    text: ztitle,
                    top: -1,
                    left: -5
                },
                grid: grid,
                tooltip: {
                    trigger: 'axis'
                },
                legend: {
                    left: theme.legend.left,
                    top: 0,
                    itemWidth: self.SIZE.itemWidth,
                    itemHeight: self.SIZE.itemHeight,
                    data: legendData
                },
                toolbox: {
                    show: false,
                    feature: {
                        mark: {
                            show: true
                        },
                        dataView: {
                            show: true,
                            readOnly: false
                        },
                        magicType: {
                            show: true,
                            type: ['line', 'bar', 'stack', 'tiled']
                        },
                        restore: {
                            show: true
                        },
                        saveAsImage: {
                            show: true
                        }
                    }
                },
                calculable: true,
                xAxis: [{
                    type: 'category',
                    boundaryGap: false,
                    data: categories
                }],
                yAxis: [{
                    type: 'value'
                }],
                series: series
            };
            return opt;
        },
        mergeLocalCircle: function(data, theme) {
            this.trace(data);
            if (null == data || null == this.COLOR) return;
            var self = this;
            var ztitle = '',
                obj = {},
                title = '',
                categories = [],
                legendData = [],
                seriesData = [];
            obj = data;
            title = data.title;
            var total = self.getTotal(obj['seriesData'], 'value');
            _.each(obj['seriesData'], function(item, index) {
                var legendItem = item.name;
                legendData.push(legendItem);
                var seriesItem = {
                    value: item.value,
                    name: item.name
                };
                seriesData.push(seriesItem);
            });
            var showLabel = true;
            if (_.has(theme, 'showLabel')) {
                showLabel = theme.showLabel;
            }
            //local circle
            opt = {
                iTitle: title,
                tooltip: {
                    trigger: 'item',
                    formatter: "{a} <br/>{b} : {c} ({d}%)"
                },
                legend: {
                    show: false,
                    orient: 'vertical',
                    x: 'left',
                    data: legendData
                },
                toolbox: {
                    show: false,
                    feature: {
                        mark: {
                            show: true
                        },
                        dataView: {
                            show: true,
                            readOnly: false
                        },
                        magicType: {
                            show: true,
                            type: ['pie', 'funnel'],
                            option: {
                                funnel: {
                                    x: '25%',
                                    width: '50%',
                                    funnelAlign: 'center',
                                    max: 1548
                                }
                            }
                        },
                        restore: {
                            show: true
                        },
                        saveAsImage: {
                            show: true
                        }
                    }
                },
                calculable: true,
                series: [{
                    name: title,
                    type: 'pie',
                    radius: ['35%', '78%'],
                    center: ['50%', '50%'],
                    itemStyle: {
                        normal: {
                            label: {
                                show: showLabel
                            },
                            labelLine: {
                                show: showLabel
                            }
                        },
                        emphasis: {
                            label: {
                                show: showLabel,
                                position: 'center',
                                textStyle: {
                                    fontSize: '12',
                                    fontWeight: 'bold'
                                }
                            }
                        }
                    },
                    data: seriesData
                }]
            };
            self.trace(opt);
            return opt;
        },
        mergeHbar: function(data, theme) {
            this.trace(data);
            if (null == data || null == this.COLOR) return;
            var self = this;
            var ztitle = '',
                title = '',
                categories = [],
                legendData = [],
                seriesData = [];
            ztitle = data['chartData']['yzTitle'];
            title = _.has(data['chartData'], 'title') ? data['chartData']['title'] : '';
            categories = data['chartData']['categories'];
            _.each(data['chartData']['series'], function(item, index) {
                var legendItem = {
                    name: item.name,
                    textStyle: {
                        color: self.COLOR.label_color
                    },
                    icon: 'stack'
                };
                legendData.push(legendItem);
                var barMaxWidth = '20px';
                if (_.has(theme, 'barMaxWidth')) {
                    barMaxWidth = theme.barMaxWidth;
                }
                var seriesItem = {
                    name: item.name,
                    type: 'bar',
                    barWidth: self.SIZE.hbar_width,
                    barMaxWidth: barMaxWidth,
                    /*barGap: '-80%',
                    barCategoryGap: '40%',*/
                    stack: '总量',
                    label: {
                        normal: {
                            show: false,
                            position: 'insideRight'
                        }
                    },
                    data: item.data
                };
                seriesData.push(seriesItem);
            });

            var grid = self.SIZE.grid;

            if (_.has(theme, 'grid')) {
                grid = $.extend(true, {}, grid, theme.grid);
            }
            //hbar
            opt = {
                tooltip: {
                    trigger: 'axis',
                    axisPointer: { // 坐标轴指示器，坐标轴触发有效
                        type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
                    }
                },
                iTitle: title,
                title: {
                    show: true,
                    text: ztitle,
                    top: -1,
                    left: -5
                },
                legend: {
                    left: theme.legend.left,
                    top: 0,
                    itemWidth: self.SIZE.itemWidth,
                    itemHeight: self.SIZE.itemHeight,
                    data: legendData
                },
                grid: $.extend(true, {}, {
                    itemWidth: self.SIZE.itemWidth,
                    itemHeight: self.SIZE.itemHeight
                }, grid),
                xAxis: {
                    type: 'value'
                },
                yAxis: {
                    type: 'category',
                    data: categories,
                    axisTick: {
                        alignWithLabel: true
                    }
                },
                series: seriesData
            };
            this.trace(opt);
            return opt;
        },
        getProvinceName: function() {
            return '';
        },
        getYesterday: function() {
            return '2018-01-01'
        },
        getParam: function(name) {
            var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
            var r = window.location.search.substr(1).match(reg);
            if (r != null) return unescape(r[2]);
            return null;
        },
        getTotal: function(arr, field) {
            var result = 0;
            field = field || 'value';
            _.each(arr, function(item) {
                result += item[field];
            })
            return result
        },
        getPercent: function(total, one) {
            if (total == 0) {
                return '0%';
            }
            var per = one * 100 / total;
            return per.toFixed(2) + '%';
        },

        getPercentByJindu: function(total, one, jindu) {
            if (total == 0) {
                return 0.00;
            }

            jindu = jindu || 2;
            var per = one * 100 / total;
            return per.toFixed(jindu);
        },

        getAccuratePercent: function(arr, field, one) {
            var result = 0;
            var self = this;
            var fixedTotal = 0,
                total = this.getTotal(arr, field);

            if (one[field] == '0') return result + '%';

            var minArr = _.min(arr, function(item, index) {
                var tempPercent = self.getPercentByJindu(total, item[field], 4);
                var thridValue = (tempPercent + '').split('').reverse().join('').charAt(2);
                return thridValue;
            });

            var newArr = [];

            _.each(arr, function(single, i) {
                if (!_.contains(minArr, single[field])) {
                    newArr.push(single);
                }
            });

            if (_.contains(newArr, one)) {
                result = parseFloat(self.getPercentByJindu(total, one[field], 2));
            } else {
                _.each(newArr, function(_item, _index) {
                    var tempPer = self.getPercentByJindu(total, _item[field], 2);
                    fixedTotal += parseFloat(tempPer);
                });

                var shenTotal = 100 - fixedTotal;

                result = shenTotal;
            }

            console.log('计算出的百分比为：' + result.toFixed(2) + '%');

            return result.toFixed(2) + '%';
        },

        addListener: function() {
            var self = this;
            $(window).resize(function() {
                self.resizeAllChart();
            });

            $(window).on('panel_resize', function() {
                self.resizeAllChart();
            });
        }
    };
    window.yarn = ECHART_YARN;
})(window, jQuery, _, window.myEcharts || echarts);